{"version":3,"sources":["../../lib/db-functions.js"],"names":["admin","serviceAccount","require","initializeApp","credential","cert","databaseURL","db","firestore","getThreadInfo","threadID","collection","doc","get","then","exists","data","catch","Error","err","createThreadDoc","isGroup","version","context","group","eligible","setDoc","set","updateContext","updatedContext","merge","isEligible","cmd","code","commands","indexOf","threadInfo","threadExists","currentCount","Promise","resolve","reject","numberOfMessages","updateCounter","count"],"mappings":"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","file":"db-functions.js","sourcesContent":["/**\n * Created by sanil on 11/19/17.\n */\n\nimport * as admin from \"firebase-admin\";\n\n// Firebase initialization\nconst serviceAccount = require(\"../private/serviceAccountKey\");\nadmin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n    databaseURL: \"https://twentyei-1489348155811.firebaseio.com\"\n});\nconst db = admin.firestore();\n\n\n/**\n * Gets database information for a thread from Firebase.\n *\n * @param threadID Thread ID number\n * @returns {Promise.<T>}\n */\nexport const getThreadInfo = async (threadID) => {\n    return await db.collection('chats').doc(threadID).get()\n        .then(async doc => {\n            if (!doc.exists) {\n                return false;\n            } else {\n                return doc.data();\n            }\n        })\n        .catch(err => {\n            return new Error(\"Error getting document: \" + err);\n        });\n};\n\n\n/**\n * Initializes a document for threads in Firebase.\n *\n * @param threadID Thread ID number\n * @param isGroup Boolean indicating whether thread is group\n */\nexport const createThreadDoc = (threadID, isGroup) => {\n    let data = {\n        version: 1,\n        context: \"\",\n        group: isGroup,\n        eligible: [\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true\n        ]\n    };\n\n    let setDoc = db.collection('chats').doc(threadID).set(data);\n};\n\n\n/**\n * Updates context for Cleverbot.\n *\n * @param threadID\n * @param updatedContext\n */\nexport const updateContext = (threadID, updatedContext) => {\n    let data = {\n        context: updatedContext\n    };\n\n    let setDoc = db.collection('chats').doc(threadID).set(data, {merge: true});\n};\n\n\n/**\n * Check if a thread has a command enabled.\n *\n * @param cmd Command to check\n * @param threadID Thread ID number\n * @returns {Promise.<TResult>}\n */\nexport const isEligible = async (cmd, threadID) => {\n    let code;\n    let commands = ['add', 'kick', 'spotify', 'emoji', 'color', 'giphy', 'title', 'roast', 'pup', 'bot'];\n\n    code = commands.indexOf(cmd);\n\n    return getThreadInfo(threadID).then(threadInfo => {\n        return !!threadInfo.eligible[code];\n    });\n};\n\n\n/**\n * Check if thread exists.\n *\n * @param threadID\n * @returns {Promise.<void>}\n */\nexport const threadExists = async (threadID) => {\n    getThreadInfo(threadID)\n        .then(threadInfo => {\n            return threadInfo !== false;\n        });\n};\n\n\n/**\n * Get current count.\n * @returns {Promise}\n */\nexport const currentCount = () => {\n    return new Promise((resolve, reject) => {\n        db.collection('meta').doc('info').get()\n            .then(async doc => {\n                resolve(doc.data().numberOfMessages);\n            })\n            .catch(err => {\n                reject(new Error(\"Error getting count: \" + err));\n            });\n    })\n};\n\n\n/**\n * Increments counter.\n */\nexport const updateCounter = () => {\n    currentCount()\n        .then((count) => {\n            let data = {\n                numberOfMessages: (count + 1)\n            };\n\n            let setDoc = db.collection('meta').doc('info').set(data, {merge: true});\n        });\n};"]}